download.file(rvest)
#install.packages("rvest")
#install.packages("dplyr")
#install.packages("tidyr")
#install.packages("stringr")
#install.packages("janitor")
library(rvest)
library(dplyr)
library(tidyr)
library(stringr)
library(janitor)
url <- "https://killedbypolice.net/kbp2020"
url_html <- read_html(url)
whole_table <- url_html %>% 
  html_nodes("table") %>%
  html_table()  #str(whole_table) turns out to be a list
library(tidyverse)
head(whole_table)
new_table <- do.call(cbind,unlist(whole_table, recursive = FALSE)) 
head(new_table) # ok, looks good, too bad it took 2 hours
scrape_police_kill <- function(website){
  url <- read_html(website)
  annual_table <- url %>% 
    html_nodes("table") %>%
    html_table()  # result is a list
  annual_table <- do.call(cbind,unlist(annual_table, recursive = FALSE))
}
table2018 <- scrape_police_kill("https://killedbypolice.net/kbp2018")
table2018 %>% 
  head()
mastertable=NULL
for (year in 2013:2020){  # here we create a loop to iterate over the years
  print(year)
  url <- "https://killedbypolice.net/kbp"   # the annual URLs end with "kbp2017" ,etc.
  website <- paste0(url,year)  # here we bind the year to the website to form the URL
  annual_table <- scrape_police_kill(website) # here we apply the function
  mastertable <- rbind(mastertable, annual_table) # we add the scraped results from the given year to our master dataset
}

head(mastertable,2)
tail(mastertable)
mastertable <- as_tibble(mastertable)
str(mastertable)

data <- mastertable %>% 
  mutate(Age = as.numeric(Age)) %>% 
  rename(Method = "*") 
mastertable$Date[c(70:80, 160:170)]
tail(unique(mastertable$Date))
library(lubridate)

data <- data %>% 
  mutate(Date =
           case_when(
             grepl("201[34]",Date) ~ mdy(Date),  
             # convert dates that contain 2013 or 2014 into mdy format 
             !grepl("201[34]",Date)~ ymd(Date)))
# convert all other dates ymd format
data <- data %>% 
  mutate(Year = year(Date))  # I am creating a new column Year from the Date for later plots
tail(data$Year)
class(data$Date)
length(which(is.na(data$Date)))

write.csv(data,"data/policekillings202010.csv")
#install.packages("ggridges")
#install.packages("statebins")
library(ggplot2)
library(ggridges)
#graff for forskel på døde i forhold til mand/kvinde
data %>% 
  filter(Gender %in% c("F", "M", "T")) %>% 
  filter(!is.na(Year)) %>% 
  ggplot(aes(x = Age,
             y = factor(Year),
             fill = Gender)) +
  geom_density_ridges(alpha = 0.5, 
                      scale = 0.9)  +
  theme_ridges(font_size = 10) +
  scale_x_continuous(breaks = seq(0, 100, 10),
                     labels = seq(0, 100, 10)) +
  xlab("Age at death (years)") +
  ylab("Year") +
  theme(axis.title = element_text(size = 14))

#Graph for døde Sorte overfor hvide
data %>% 
  filter(Race %in% c("B", "W", "L")) %>% 
  filter(!is.na(Year)) %>% 
  ggplot(aes(x = Age,
             y = factor(Year),
             fill = Race)) +
  geom_density_ridges(alpha = 0.6, 
                      scale = 0.9)  +
  theme_ridges(font_size = 10) +
  scale_x_continuous(breaks = seq(0, 100, 10),
                     labels = seq(0, 100, 10)) +
  xlab("Age at death (years)") +
  ylab("Year") +
  theme(axis.title = element_text(size = 14))
#graf for måden de er dræbt på
data %>% 
  filter(!is.na(Year)) %>% 
  filter(Method != "NA") %>% 
  filter(Gender %in% c("M", "F", NA)) %>% 
  group_by(Year, 
           Gender,
           Method) %>% 
  tally() %>% 
  mutate(perc = n / sum(n) * 100)  %>% 
  ggplot(aes(Method,
             perc,
             fill = Gender)) +
  geom_col() +
  facet_grid(Gender~Year) +
  theme_minimal(base_size = 10) +
  xlab("Method of killing") +
  ylab("Percentage of all\npeople killed by police\nby gender") 
#install.packages(c("statebins", "viridis"))
library(statebins) # using GitHub version
library(viridis)

state_abb <- data_frame(state_name = state.name,
                        state_abb = state.abb)
url2 <- "https://www2.census.gov/programs-surveys/popest/tables/2010-2016/state/totals/nst-est2016-01.xlsx"
state_populations <- readr::read_csv("data/nst-est2016-01.csv")
write_csv(data, "data/nst-est2016-01.csv")

# clean it a little
state_populations <-  
  state_populations %>% 
  mutate(state_name = gsub("\\.", "", X__1)) %>%
  left_join(state_abb)


# compute deaths by state and as deaths per 1000 people in each state
by_state16 <- data %>% 
  filter(Year == 2016) %>% 
  group_by(State) %>% 
  tally() %>% 
  left_join(state_abb, by = c('State' = 'state_abb')) %>% 
  filter(!is.na(state_name)) %>% 
  left_join(state_populations) %>% 
  mutate(per_n_people = (n / `2016`) * 1000000)
